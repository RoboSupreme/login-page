<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Music Journal</title>
  <link rel="stylesheet" href="style.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: 'Arial', sans-serif;
      background-color: #f9f9f9;
      color: #333;
      height: 100%;
      overflow-y: auto;
    }
    
    .journal-container {
      position: relative;
      min-height: 100vh;
      width: 100%;
      background-image: url('https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80');
      background-size: cover;
      background-attachment: fixed;
      background-position: center;
      padding-bottom: 50px;
      overflow-y: visible;
    }
    
    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 1;
    }
    
    .journal-content {
      position: relative;
      z-index: 2;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      position: relative;
    }
    
    .header {
      text-align: center;
      padding: 20px 0;
      margin-bottom: 30px;
      border-bottom: 2px solid #2196F3;
    }
    
    .header h1 {
      color: #2196F3;
      margin-bottom: 10px;
    }
    
    .nav-buttons {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
      position: relative;
    }
    
    .back-btn {
      background-color: #555;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .add-entry-btn {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .timeline {
      position: relative;
      max-width: 700px;
      margin: 0 auto;
    }
    
    .timeline::after {
      content: '';
      position: absolute;
      width: 6px;
      background-color: #2196F3;
      top: 0;
      bottom: 0;
      left: 50%;
      margin-left: -3px;
    }
    
    .entry {
      position: relative;
      width: 46%;
      margin-bottom: 40px;
    }
    
    .entry:nth-child(odd) {
      left: 0;
    }
    
    .entry:nth-child(even) {
      left: 54%;
    }
    
    .entry-content {
      padding: 20px;
      background-color: white;
      border-radius: 6px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      position: relative;
    }
    
    .entry-date {
      position: absolute;
      top: 10px;
      font-size: 14px;
      color: #777;
      font-weight: bold;
    }
    
    .entry:nth-child(odd) .entry-date {
      right: 10px;
    }
    
    .entry:nth-child(even) .entry-date {
      left: 10px;
    }
    
    .entry-title {
      margin-top: 30px;
      margin-bottom: 10px;
      color: #333;
    }
    
    .entry-icon {
      position: absolute;
      background-color: white;
      border: 4px solid #2196F3;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      top: 15px;
      z-index: 1;
      cursor: pointer;
      transition: transform 0.3s ease;
    }
    
    .entry-icon:hover {
      transform: scale(1.1);
    }
    
    .entry:nth-child(odd) .entry-icon {
      right: -63px;
    }
    
    .entry:nth-child(even) .entry-icon {
      left: -63px;
    }
    
    .entry-type-video i {
      color: #dc3545;
    }
    
    .entry-type-document i {
      color: #0d6efd;
    }
    
    .no-entries {
      text-align: center;
      padding: 40px 0;
      color: #777;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 10;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 20px;
      width: 60%;
      max-width: 500px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      position: relative;
    }
    
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .close:hover {
      color: black;
    }
    
    .modal h2 {
      margin-top: 0;
      color: #2196F3;
    }
    
    .form-group {
      margin-bottom: 15px;
      display: block;
      width: 100%;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    .form-group input,
    .form-group select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-sizing: border-box;
      display: block;
    }
    
    .form-group button {
      padding: 10px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      display: block;
      width: 100%;
    }
    
    /* Media queries for responsiveness */
    @media screen and (max-width: 767px) {
      .timeline::after {
        left: 31px;
      }
      
      .entry {
        width: 85%;
        left: 65px !important;
      }
      
      .entry:nth-child(odd) .entry-icon,
      .entry:nth-child(even) .entry-icon {
        left: -50px;
      }
      
      .entry:nth-child(odd) .entry-date,
      .entry:nth-child(even) .entry-date {
        right: 10px;
        left: auto;
      }
    }
    
    /* Add a floating "back to top" button for when many entries exist */
    .back-to-top {
      display: none;
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #2196F3;
      color: white;
      border: none;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      font-size: 20px;
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0,0,0,0.3);
      z-index: 99;
    }
    
    .back-to-top:hover {
      background-color: #0b7dda;
    }
  </style>
</head>
<body>
  <div class="journal-container">
    <div class="overlay"></div>
    <div class="journal-content">
      <div class="header">
        <h1>Music Journal</h1>
        <p id="studentName">Student: </p>
        <div id="classContext" style="display: none; margin-top: 10px; padding: 10px; background-color: #e3f2fd; border-radius: 4px;">
          <p id="classInfo">Viewing entries for class: <span id="className"></span></p>
        </div>
      </div>
      
      <div class="nav-buttons">
        <button id="backBtn" class="back-btn"><i class="fas fa-arrow-left"></i> Back to Dashboard</button>
        <button id="addEntryBtn" class="add-entry-btn"><i class="fas fa-plus"></i> Add New Entry</button>
      </div>
      
      <div class="timeline" id="entriesTimeline">
        <!-- Journal entries will be dynamically added here -->
        <div class="no-entries" id="noEntriesMsg">
          <p>No journal entries yet. Click "Add New Entry" to get started.</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Back to top button -->
  <button id="backToTopBtn" class="back-to-top"><i class="fas fa-arrow-up"></i></button>
  
  <!-- Add Entry Modal -->
  <div id="addEntryModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close" id="modalClose">&times;</span>
      <h2>Add New Journal Entry</h2>
      <form id="entryForm" style="display: block; width: 100%;">
        <!-- Hidden field to track entry ID for editing -->
        <input type="hidden" id="entryIdField" value="">
        <div class="form-group">
          <label for="entryTitle">Title</label>
          <input type="text" id="entryTitle" required>
        </div>
        <div class="form-group">
          <label for="entryType">Entry Type</label>
          <select id="entryType" required>
            <option value="">Select entry type</option>
            <option value="video">Video</option>
            <option value="document">Document</option>
          </select>
        </div>
        <div class="form-group">
          <label for="entryLink">Microsoft Link</label>
          <input type="url" id="entryLink" required placeholder="https://...">
        </div>
        <div class="form-group">
          <button type="submit" id="saveEntryBtn">Save Entry</button>
        </div>
      </form>
    </div>
  </div>
  
  <script>
    // Immediately executing function to avoid global scope pollution
    (function() {
      console.log("Script executing");
      
      // Wait for DOM to be fully loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
      } else {
        initialize();
      }
      
      // Main initialization function
      function initialize() {
        console.log("Initializing page");
        
        // Check login status first
        if (localStorage.getItem('musicUserLoggedIn') !== 'true') {
          console.log("Not logged in, redirecting");
          window.location.href = 'index.html';
          return;
        }
        
        // User is logged in, continue
        const username = localStorage.getItem('musicUsername');
        console.log("Logged in as:", username);
        
        // Check for class ID in URL
        const urlParams = new URLSearchParams(window.location.search);
        const classId = urlParams.get('class_id');
        
        // Update the header
        document.querySelector('.header h1').textContent = `${username}'s Music Journal`;
        document.getElementById('studentName').textContent = `Student: ${username}`;
        
        // If we're viewing a class-specific journal, update the UI
        if (classId) {
          // Show the class context
          document.getElementById('classContext').style.display = 'block';
          
          // Get class name from Supabase
          fetchClassInfo(classId);
          
          // Set the button text to 'Back to Class'
          document.getElementById('backBtn').textContent = 'Back to Class';
        }
        
        // Get user data for entries
        const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
        const userEmail = currentUser.email || username + '@example.com';
        
        // Load existing entries
        loadEntries(userEmail, classId);
        
        // Explicit button handlers - USING DIRECT DOM LEVEL 0 EVENTS
        // Back button functionality - will go to class or dashboard depending on context
        const backBtn = document.getElementById('backBtn');
        backBtn.onclick = function() {
          console.log("Back button clicked");
          // Get class ID from URL if present
          const urlParams = new URLSearchParams(window.location.search);
          const classId = urlParams.get('class_id');
          
          if (classId) {
            // Go back to class page
            window.location.href = `class.html?id=${classId}`;
          } else {
            // Go back to dashboard
            window.location.href = 'dashboard.html';
          }
        };
        
        // Add Entry button
        const addEntryBtn = document.getElementById('addEntryBtn');
        addEntryBtn.onclick = function() {
          console.log("Add Entry button clicked");
          // Reset modal title and button text for new entry
          document.querySelector('#addEntryModal h2').textContent = 'Add New Journal Entry';
          document.getElementById('saveEntryBtn').textContent = 'Save Entry';
          // Clear any previous entry ID
          document.getElementById('entryIdField').value = '';
          // Show the modal
          document.getElementById('addEntryModal').style.display = 'block';
        };
        
        // Modal close button
        const closeBtn = document.querySelector('.close');
        closeBtn.onclick = function() {
          console.log("Close button clicked");
          document.getElementById('addEntryModal').style.display = 'none';
          // Reset form and clear entry ID
          document.getElementById('entryForm').reset();
          document.getElementById('entryIdField').value = '';
          // Reset modal title and button text
          document.querySelector('#addEntryModal h2').textContent = 'Add New Journal Entry';
          document.getElementById('saveEntryBtn').textContent = 'Save Entry';
        };
        
        // Close modal when clicking outside
        window.onclick = function(event) {
          if (event.target === document.getElementById('addEntryModal')) {
            document.getElementById('addEntryModal').style.display = 'none';
          }
        };
        
        // Back to top button
        const backToTopBtn = document.getElementById('backToTopBtn');
        backToTopBtn.onclick = function() {
          window.scrollTo({
            top: 0,
            behavior: 'smooth'
          });
        };
        
        // Show/hide back to top button on scroll
        window.onscroll = function() {
          if (window.pageYOffset > 300) {
            backToTopBtn.style.display = 'block';
          } else {
            backToTopBtn.style.display = 'none';
          }
        };
        
        // Form submission
        const entryForm = document.getElementById('entryForm');
        entryForm.onsubmit = function(e) {
          e.preventDefault();
          console.log("Form submitted");
          
          const title = document.getElementById('entryTitle').value;
          const type = document.getElementById('entryType').value;
          const link = document.getElementById('entryLink').value;
          
          if (!title || !type || !link) {
            alert('Please fill in all fields');
            return;
          }
          
          // Check if we're in a class context
          const urlParams = new URLSearchParams(window.location.search);
          const classId = urlParams.get('class_id');
          
          const newEntry = {
            id: Date.now().toString(),
            title,
            type,
            link,
            date: new Date().toISOString(),
            classId: classId || null
          };
          
          // Show loading indicator
          const submitBtn = document.querySelector('#entryForm button[type="submit"]');
          const originalBtnText = submitBtn.textContent;
          submitBtn.textContent = 'Saving...';
          submitBtn.disabled = true;
          
          // Save entry to Supabase
          saveEntry(newEntry).then(result => {
            if (result.success) {
              console.log('Entry saved to Supabase successfully');
            } else {
              console.error('Failed to save entry to Supabase:', result.error);
              alert('Error saving entry: ' + result.error);
            }
            
            // Reset button state
            submitBtn.textContent = originalBtnText;
            submitBtn.disabled = false;
            
            // Close modal and reset form
            document.getElementById('addEntryModal').style.display = 'none';
            entryForm.reset();
            
            // Reload entries
            loadEntries(userEmail);
          });
        };
      }
      
      // Function to fetch class info
      async function fetchClassInfo(classId) {
        try {
          const { data: classData, error } = await supabaseClient
            .from('classrooms')
            .select('class_name, description')
            .eq('id', classId)
            .single();
            
          if (error) {
            console.error('Error fetching class info:', error);
            document.getElementById('className').textContent = 'Unknown Class';
            return;
          }
          
          if (classData) {
            document.getElementById('className').textContent = classData.class_name;
            // Update page title too
            document.title = `Music Journal - ${classData.class_name}`;
          }
        } catch (err) {
          console.error('Exception fetching class info:', err);
        }
      }
      
      // Function to load journal entries
      async function loadEntries(userEmail, classId = null) {
        const entriesContainer = document.getElementById('entriesTimeline');
        const noEntriesMsg = document.getElementById('noEntriesMsg');
        
        // Update the no entries message based on context
        if (classId) {
          noEntriesMsg.textContent = 'No entries found for this class. Create your first entry using the button above!';
        } else {
          noEntriesMsg.textContent = 'No entries found. Create your first entry using the button above!';
        }
        
        // Clear existing entries except the noEntriesMsg
        const children = Array.from(entriesContainer.children);
        children.forEach(child => {
          if (child !== noEntriesMsg) {
            entriesContainer.removeChild(child);
          }
        });
        
        // Show loading indicator
        const loadingMsg = document.createElement('div');
        loadingMsg.textContent = 'Loading your entries...';
        loadingMsg.style.textAlign = 'center';
        loadingMsg.style.padding = '20px';
        entriesContainer.appendChild(loadingMsg);
        
        try {
          // Get entries from Supabase
          console.log('Loading entries from Supabase...');
          // Get the classId from URL again in case the function was called outside of initialize
          const urlParams = new URLSearchParams(window.location.search);
          const classIdParam = classId || urlParams.get('class_id');
          const result = await loadEntriesFromSupabase(classIdParam);
          const entries = result.entries;
          
          // Remove loading indicator
          entriesContainer.removeChild(loadingMsg);
          
          if (!result.success) {
            console.error('Error loading entries:', result.error);
            alert('Error loading entries: ' + result.error);
            noEntriesMsg.textContent = 'Error loading entries. Please try again later.';
            noEntriesMsg.style.display = 'block';
            return;
          }
          
          if (entries.length === 0) {
          noEntriesMsg.style.display = 'block';
          document.getElementById('backToTopBtn').style.display = 'none';
        } else {
          noEntriesMsg.style.display = 'none';
          
          // Clear existing entries
          const children = Array.from(entriesContainer.children);
          children.forEach(child => {
            if (child !== noEntriesMsg) {
              entriesContainer.removeChild(child);
            }
          });
          
          // Add entries to timeline
          entries.forEach((entry, index) => {
            const entryElement = createEntryElement(entry);
            entryElement.classList.add(index % 2 === 0 ? 'left' : 'right');
            entriesContainer.insertBefore(entryElement, noEntriesMsg);
          });
        }
      } catch (error) {
        console.error('Exception loading entries:', error);
        // Remove loading indicator if it exists
        if (loadingMsg.parentNode) {
          entriesContainer.removeChild(loadingMsg);
        }
        noEntriesMsg.textContent = 'Error loading entries: ' + error.message;
        noEntriesMsg.style.display = 'block';
      }
      }
      
      // Function to create entry element
      function createEntryElement(entry) {
        const container = document.createElement('div');
        container.className = 'container';
        container.dataset.entryId = entry.id; // Store entry ID for reference
        
        const content = document.createElement('div');
        content.className = 'content';
        
        const titleDiv = document.createElement('div');
        titleDiv.className = 'entry-title';
        
        const icon = document.createElement('div');
        icon.className = `entry-icon ${entry.type || entry.entry_type}-icon`;
        
        const iconElement = document.createElement('i');
        if ((entry.type || entry.entry_type) === 'video') {
          iconElement.className = 'fas fa-video';
        } else {
          iconElement.className = 'fas fa-file-alt';
        }
        
        icon.appendChild(iconElement);
        
        const title = document.createElement('h2');
        title.textContent = entry.title;
        
        titleDiv.appendChild(icon);
        titleDiv.appendChild(title);
        
        const date = document.createElement('p');
        date.className = 'entry-date';
        date.textContent = new Date(entry.date || entry.created_at).toLocaleString();
        
        const link = document.createElement('a');
        link.href = entry.link;
        link.className = 'entry-link';
        link.textContent = 'View in Microsoft';
        link.target = '_blank';
        
        // Add edit button
        const editButton = document.createElement('button');
        editButton.className = 'edit-btn';
        editButton.innerHTML = '<i class="fas fa-edit"></i> Edit';
        editButton.style.marginTop = '10px';
        editButton.style.padding = '5px 10px';
        editButton.style.backgroundColor = '#2196F3';
        editButton.style.color = 'white';
        editButton.style.border = 'none';
        editButton.style.borderRadius = '4px';
        editButton.style.cursor = 'pointer';
        editButton.dataset.entryId = entry.id; // Store entry ID in the button for reference
        
        // Add click handler to edit button
        editButton.addEventListener('click', function() {
          openEditForm(entry.id);
        });
        
        content.appendChild(titleDiv);
        content.appendChild(date);
        content.appendChild(link);
        content.appendChild(editButton);
        container.appendChild(content);
        
        return container;
      }
    })();
  </script>
  <!-- Supabase JS -->
  <script src="https://unpkg.com/@supabase/supabase-js"></script>
  
  <!-- Journal storage functionality -->
  <script src="journal-storage.js"></script>
</body>
</html>
